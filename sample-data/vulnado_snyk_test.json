{
  "vulnerabilities": [
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-05-19T10:19:10.287403Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. When Default Typing is enabled for an externally exposed JSON endpoint, the service has the mysql-connector-java jar in the classpath. An attacker can host a crafted MySQL server reachable by the victim and send a crafted JSON message that allows them to read arbitrary local files on the server. This occurs due to missing `com.mysql.cj.jdbc.admin.MiniAdmin` validation.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9, 2.8.11.3, 2.7.9.6 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/dda513bd7251b4f32b7b60b1c13740e3b5a43024)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2326)\n- [Github Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.9)\n",
      "disclosureTime": "2019-05-17T18:12:58Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.9",
        "2.8.11.3",
        "2.7.9.6"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.9)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.9)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-174736",
      "identifiers": {
        "CVE": [
          "CVE-2019-12086"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-12T14:37:05.661446Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-05-17T18:12:58Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/dda513bd7251b4f32b7b60b1c13740e3b5a43024"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2326"
        },
        {
          "title": "Github Release Tag",
          "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.9"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.9.0,2.9.9)",
          "[2.8.0,2.8.11.3)",
          "[,2.7.9.6)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [
        false,
        "io.jsonwebtoken:jjwt-jackson@0.10.7",
        "com.fasterxml.jackson.core:jackson-databind@2.9.9.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-06-19T15:28:46.421239Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x through 2.9.9. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has JDOM 1.x or 2.x jar in the classpath, an attacker can send a specifically crafted JSON message that allows them to read arbitrary local files on the server.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9.1, 2.8.11.4, 2.7.9.6 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/5f7c69bba07a7155adde130d9dee2e54a54f1fa5)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2341)\n",
      "disclosureTime": "2019-06-19T14:34:16Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.9.1",
        "2.8.11.4",
        "2.7.9.6"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.9.0,2.9.9.1)",
            "[2.8.0,2.8.11.4)",
            "[,2.7.9.6)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.9.0,2.9.9.1)",
            "[2.8.0,2.8.11.4)",
            "[,2.7.9.6)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-450207",
      "identifiers": {
        "CVE": [
          "CVE-2019-12814"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-12T14:37:03.038735Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-06-19T14:34:16Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/5f7c69bba07a7155adde130d9dee2e54a54f1fa5"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2341"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.9.0,2.9.9.1)",
          "[2.8.0,2.8.11.4)",
          "[,2.7.9.6)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [
        false,
        "io.jsonwebtoken:jjwt-jackson@0.10.7",
        "com.fasterxml.jackson.core:jackson-databind@2.9.9.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-06-25T10:06:54.889582Z",
      "credit": [
        "College of software Nankai University"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data which allows attackers to have a variety of impacts by leveraging failure to block the `logback-core` class from polymorphic deserialization. Depending on the `classpath` content, remote code execution may be possible.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9.1, 2.8.11.4, 2.7.9.6 or higher.\n## References\n- [Debian Security Announcement](https://lists.debian.org/debian-lts-announce/2019/06/msg00019.html)\n- [Github Fix](https://github.com/FasterXML/jackson-databind/blob/a6667bcd1f0114f5b004d5203f4139b1e6104a1c/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2334)\n- [Jackson CVEs Don't Panic - Blog](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [Release Notes](https://github.com/FasterXML/jackson-databind/blob/a6667bcd1f0114f5b004d5203f4139b1e6104a1c/release-notes/VERSION-2.x)\n",
      "disclosureTime": "2019-05-28T10:27:59Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.9.1",
        "2.8.11.4",
        "2.7.9.6"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.9.0,2.9.9.1)",
            "[2.8.0,2.8.11.4)",
            "[,2.7.9.6)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.9.0,2.9.9.1)",
            "[2.8.0,2.8.11.4)",
            "[,2.7.9.6)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917",
      "identifiers": {
        "CVE": [
          "CVE-2019-12384"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2019-10-02T14:58:19.254964Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-06-25T10:26:29Z",
      "references": [
        {
          "title": "Debian Security Announcement",
          "url": "https://lists.debian.org/debian-lts-announce/2019/06/msg00019.html"
        },
        {
          "title": "Github Fix",
          "url": "https://github.com/FasterXML/jackson-databind/blob/a6667bcd1f0114f5b004d5203f4139b1e6104a1c/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2334"
        },
        {
          "title": "Jackson CVEs Don't Panic - Blog",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        },
        {
          "title": "Release Notes",
          "url": "https://github.com/FasterXML/jackson-databind/blob/a6667bcd1f0114f5b004d5203f4139b1e6104a1c/release-notes/VERSION-2.x"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.9.0,2.9.9.1)",
          "[2.8.0,2.8.11.4)",
          "[,2.7.9.6)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [
        false,
        "io.jsonwebtoken:jjwt-jackson@0.10.7",
        "com.fasterxml.jackson.core:jackson-databind@2.9.9.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-07-29T14:55:33.030000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. `SubTypeValidator.java` mishandles default typing when `ehcache` is used, leading to remote code execution.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9.2, 2.8.11.4, 2.7.9.6 or higher.\n## References\n- [GitHub Comparison](https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.1...jackson-databind-2.9.9.2)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2387)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2389)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2395)\n- [Snyk Blog](https://snyk.io/blog/jackson-deserialization-vulnerability/)\n",
      "disclosureTime": "2019-07-29T12:40:42Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.9.2",
        "2.8.11.4",
        "2.7.9.6"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.9.0,2.9.9.2)",
            "[2.8.0,2.8.11.4)",
            "[,2.7.9.6)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.9.0,2.9.9.2)",
            "[2.8.0,2.8.11.4)",
            "[,2.7.9.6)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-455617",
      "identifiers": {
        "CVE": [
          "CVE-2019-14379",
          "CVE-2019-14439"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-24T12:22:00.952183Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-07-29T12:40:42Z",
      "references": [
        {
          "title": "GitHub Comparison",
          "url": "https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.1...jackson-databind-2.9.9.2"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2387"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2389"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2395"
        },
        {
          "title": "Snyk Blog",
          "url": "https://snyk.io/blog/jackson-deserialization-vulnerability/"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.9.0,2.9.9.2)",
          "[2.8.0,2.8.11.4)",
          "[,2.7.9.6)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-09-16T13:03:06.837179Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered as `com.zaxxer.hikari.HikariDataSource` was not blocked.\r\n**Note:** This is a different vulnerability than CVE-2019-14540.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.10.0.pr3, 2.9.10 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/73c1c2cc76e6cdd7f3a5615cbe3207fe96e4d3db)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2449)\n",
      "disclosureTime": "2019-09-15T23:30:24Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.10.0.pr3",
        "2.9.10"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.pr2)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.pr2)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467014",
      "identifiers": {
        "CVE": [
          "CVE-2019-16335"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-12T14:37:03.810019Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-09-16T23:30:24Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/73c1c2cc76e6cdd7f3a5615cbe3207fe96e4d3db"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2449"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.10.0.pr1,2.10.0.pr3)",
          "[,2.9.10)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-09-16T13:03:10.401907Z",
      "credit": [
        "iSafeBlue"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered as `com.zaxxer.hikari.HikariConfig` was not blocked.\r\n**Note:** This is a different vulnerability than CVE-2019-16335.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.10.0.pr2, 2.9.10 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/d4983c740fec7d5576b207a8c30a63d3ea7443de)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2410)\n",
      "disclosureTime": "2019-09-15T23:27:25Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.10.0.pr2",
        "2.9.10"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0.pr2)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0.pr2)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467015",
      "identifiers": {
        "CVE": [
          "CVE-2019-14540"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-12T14:37:03.331983Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-09-16T23:27:25Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/d4983c740fec7d5576b207a8c30a63d3ea7443de"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2410"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.10.0.pr1,2.10.0.pr2)",
          "[,2.9.10)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-09-16T14:43:42.115110Z",
      "credit": [
        "Tatu Saloranta"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. None\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.10.0.pr2, 2.9.10 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/d4983c740fec7d5576b207a8c30a63d3ea7443de)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2420)\n",
      "disclosureTime": "2019-09-16T14:37:38Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.10.0.pr2",
        "2.9.10"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.10.0.pr1,2.10.0.pr2)",
            "[,2.9.10)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.10.0.pr1,2.10.0.pr2)",
            "[,2.9.10)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467016",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-12T14:37:03.592158Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-09-16T14:37:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/d4983c740fec7d5576b207a8c30a63d3ea7443de"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2420"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.10.0.pr1,2.10.0.pr2)",
          "[,2.9.10)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-10-02T08:02:18.178548Z",
      "credit": [
        "bsmali4"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered within `org.apache.commons.dbcp.datasources.SharedPoolDataSource` was not blocked. An attacker could leverage this gadget type  to perform Remote Code Execution attacks through deserialization.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.1 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/9593e16cf5a3d289a9c584f7123639655de9ddac)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2478)\n",
      "disclosureTime": "2019-10-01T17:43:33Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.10.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.1)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.1)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-469674",
      "identifiers": {
        "CVE": [
          "CVE-2019-16942"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-12T14:37:01.427620Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-10-02T17:43:33Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/9593e16cf5a3d289a9c584f7123639655de9ddac"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2478"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.1)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-10-02T08:03:39.391997Z",
      "credit": [
        "bsmali4"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered as `com.p6spy.engine.spy.P6DataSource` was not blocked. An attacker could leverage this gadget type  to perform Remote Code Execution attacks through deserialization.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.1 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/9593e16cf5a3d289a9c584f7123639655de9ddac)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2478)\n",
      "disclosureTime": "2019-10-01T17:43:33Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.10.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.1)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.1)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-469676",
      "identifiers": {
        "CVE": [
          "CVE-2019-16943"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-12T14:36:55.932819Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-10-02T17:43:33Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/9593e16cf5a3d289a9c584f7123639655de9ddac"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2478"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.1)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-10-07T10:05:31.629572Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered related to `net.sf.ehcache.hibernate.EhcacheJtaTransactionManagerLookup`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/191a4cdf87b56d2ddddb77edd895ee756b7f75eb)\n- [GitHub Comparison](https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.3...jackson-databind-2.9.10)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2460)\n",
      "disclosureTime": "2019-10-07T01:14:26Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.10"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-471943",
      "identifiers": {
        "CVE": [
          "CVE-2019-17267"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-f3j5-rmmp-3fc5"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-12T14:36:55.553486Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-10-07T01:14:26Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/191a4cdf87b56d2ddddb77edd895ee756b7f75eb"
        },
        {
          "title": "GitHub Comparison",
          "url": "https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.3...jackson-databind-2.9.10"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2460"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-10-13T07:40:03.046000Z",
      "credit": [
        "Zhangxianhui"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. When Default Typing is enabled for an externally exposed JSON endpoint and the service has the apache-log4j-extra (version 1.2.x) jar in the classpath, and an attacker can provide a JNDI service to access, it is possible to make the service execute a malicious payload.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.1 or higher.\n## References\n- [Blog Post](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/b5a304a98590b6bb766134f9261e6566dcbbb6d0)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2498)\n",
      "disclosureTime": "2019-10-12T21:52:10Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.10.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.10.1)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.10.1)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-472980",
      "identifiers": {
        "CVE": [
          "CVE-2019-17531"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-12T14:36:55.935470Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-10-13T07:41:55Z",
      "references": [
        {
          "title": "Blog Post",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/b5a304a98590b6bb766134f9261e6566dcbbb6d0"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2498"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.0.0, 2.9.10.1)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-01-03T10:26:22.562970Z",
      "credit": [
        "UltramanGaia"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. Two additional `net.sf.ehcache` gadgets are not blacklisted.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.2 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/fc4214a883dc087070f25da738ef0d49c2f3387e)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2526)\n",
      "disclosureTime": "2020-01-03T05:14:08Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.10.2"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0,2.9.10.2)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0,2.9.10.2)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-540500",
      "identifiers": {
        "CVE": [
          "CVE-2019-20330"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-12T14:37:03.729091Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-03T05:14:08Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/fc4214a883dc087070f25da738ef0d49c2f3387e"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2526"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.2)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-02-11T07:57:04.144993Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507)). \r\nIt lacks `xbean-reflect/JNDI` blocking, as demonstrated by `org.apache.xbean.propertyeditor.JndiConverter`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.8.11.5, 2.9.10.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/914e7c9f2cb8ce66724bf26a72adc7e958992497)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2620)\n",
      "disclosureTime": "2020-02-09T21:12:38Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.8.11.5",
        "2.9.10.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.8.11.5)",
            "[2.9.0,2.9.10.3)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.8.11.5)",
            "[2.9.0,2.9.10.3)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-548451",
      "identifiers": {
        "CVE": [
          "CVE-2020-8840"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-04-29T14:47:54.226800Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-02-11T21:12:38Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/914e7c9f2cb8ce66724bf26a72adc7e958992497"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2620"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.8.11.5)",
          "[2.9.0,2.9.10.3)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-02T10:29:31.222015Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. Mishandles the interaction between serialization gadgets and typing, related to:\r\n\r\n* `com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig` (aka `ibatis-sqlmap`)\r\n* `br.com.anteros.dbcp.AnterosDBCPConfig` (aka `anteros-core`)\r\n* `org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig` (aka shaded `hikari-config`)\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/9f4e97019fb0dd836533d0b6198c88787e235ae2)\n- [Github Issue #1](https://github.com/FasterXML/jackson-databind/issues/2634)\n- [GitHub Issue #2](https://github.com/FasterXML/jackson-databind/issues/2631)\n",
      "disclosureTime": "2020-03-02T05:18:36Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.6.7.3)",
            "[2.8.0,2.8.11.5)",
            "[2.9.0,2.9.10.3)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.6.7.3)",
            "[2.8.0,2.8.11.5)",
            "[2.9.0,2.9.10.3)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559094",
      "identifiers": {
        "CVE": [
          "CVE-2020-9546",
          "CVE-2020-9547",
          "CVE-2020-9548"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-5p34-5m6p-p58g"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-04-29T15:02:42.688387Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-02T05:18:36Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/9f4e97019fb0dd836533d0b6198c88787e235ae2"
        },
        {
          "title": "Github Issue #1",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2634"
        },
        {
          "title": "GitHub Issue #2",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2631"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.4)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-03T08:13:33.357434Z",
      "credit": [
        "Pedro Sampaio"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507)). \r\nIt doesn't block `common-configuration` JNDI classes `org.apache.commons.configuration.JNDIConfiguration` and `org.apache.commons.configuration2.JNDIConfiguration`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.8.11.5, 2.9.10.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/41b7f9b90149e9d44a65a8261a8deedc7186f6af)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2462)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2469)\n- [RedHat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-14892)\n",
      "disclosureTime": "2020-03-02T17:09:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.6.7.3",
        "2.8.11.5",
        "2.9.10.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.6.7.3)",
            "[2.8.0,2.8.11.5)",
            "[2.9.0,2.9.10.3)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.6.7.3)",
            "[2.8.0,2.8.11.5)",
            "[2.9.0,2.9.10.3)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559106",
      "identifiers": {
        "CVE": [
          "CVE-2019-14892",
          "CVE-2019-14893"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-04-29T15:01:24.538507Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-02T17:09:34Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/41b7f9b90149e9d44a65a8261a8deedc7186f6af"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2462"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2469"
        },
        {
          "title": "RedHat Bugzilla",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-14892"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.3)",
          "[2.8.0,2.8.11.5)",
          "[2.9.0,2.9.10.3)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-19T14:36:02.644920Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `com.caucho.config.types.ResourceRef` (aka `caucho-quercus`).\r\n\r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Commit (Master)](https://github.com/FasterXML/jackson-databind/commit/1645efbd392989cf015f459a91c999e59c921b15)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2660)\n- [On Jackson CVEs: Don’t Panic — Here is what you need to know](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2020-03-18T22:56:21Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-560762",
      "identifiers": {
        "CVE": [
          "CVE-2020-10673"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-12T14:36:56.467131Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-18T22:56:21Z",
      "references": [
        {
          "title": "GitHub Commit (Master)",
          "url": "https://github.com/FasterXML/jackson-databind/commit/1645efbd392989cf015f459a91c999e59c921b15"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2660"
        },
        {
          "title": "On Jackson CVEs: Don’t Panic — Here is what you need to know",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.0.0,2.9.10.4)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-19T15:03:20.847507Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory` (aka `aries.transaction.jms`). \r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Commit (Master)](https://github.com/FasterXML/jackson-databind/commit/592872f4235c7f2a3280725278da55544032f72d)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2659)\n- [On Jackson CVEs: Don’t Panic](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2020-03-18T22:56:24Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-560766",
      "identifiers": {
        "CVE": [
          "CVE-2020-10672"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-95cm-88f5-f2c7"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-12T14:37:00.748177Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-18T22:56:24Z",
      "references": [
        {
          "title": "GitHub Commit (Master)",
          "url": "https://github.com/FasterXML/jackson-databind/commit/592872f4235c7f2a3280725278da55544032f72d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2659"
        },
        {
          "title": "On Jackson CVEs: Don’t Panic",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.0.0,2.9.10.4)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-26T16:25:31.113677Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to gadget `javax.swing.JEditorPane`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2642)\n- [Medium Article](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2020-03-26T14:55:31Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561362",
      "identifiers": {
        "CVE": [
          "CVE-2020-10969"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-758m-v56v-grj4"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-04-29T14:56:05.785443Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-26T14:55:31Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2642"
        },
        {
          "title": "Medium Article",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.0.0,2.9.10.4)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-26T17:09:01.709397Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to gadget `org.aoju.bus.proxy.provider.remoting.RmiProvider` (aka bus-proxy).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2662)\n",
      "disclosureTime": "2020-03-26T14:55:20Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561373",
      "identifiers": {
        "CVE": [
          "CVE-2020-10968"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-04-29T14:47:21.445199Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-26T14:55:20Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2662"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.0.0,2.9.10.4)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-31T08:36:41.369827Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to gadget `org.apache.openjpa.ee.WASRegistryManagedRuntime` (aka openjpa).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/e2ba12d5d60715d95105e3e790fc234cfb59893d)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2670)\n",
      "disclosureTime": "2020-03-31T06:16:36Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561585",
      "identifiers": {
        "CVE": [
          "CVE-2020-11113"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-04-29T14:48:40.106762Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-31T06:16:36Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/e2ba12d5d60715d95105e3e790fc234cfb59893d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2670"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.4)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-31T09:28:18.821103Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to gadgets `org.apache.activemq.*` (aka activemq-jms, activemq-core, activemq-pool, and activemq-pool-jms).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/c14c9f99ed030dbd1440129585f03440c8758a99)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2664)\n",
      "disclosureTime": "2020-03-31T06:16:37Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561586",
      "identifiers": {
        "CVE": [
          "CVE-2020-11111"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-04-29T15:04:00.667463Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-31T06:16:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/c14c9f99ed030dbd1440129585f03440c8758a99"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2664"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.4)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-31T09:29:29.728517Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to gadget  `org.apache.commons.proxy.provider.remoting.RmiProvider` (aka apache/commons-proxy).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GItHub Commit](https://github.com/FasterXML/jackson-databind/commit/05d7e0e13f43e12db6a51726df12c8b4d8040676)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2666)\n",
      "disclosureTime": "2020-03-31T06:16:37Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561587",
      "identifiers": {
        "CVE": [
          "CVE-2020-11112"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-04-29T15:04:48.383032Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-31T06:16:37Z",
      "references": [
        {
          "title": "GItHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/05d7e0e13f43e12db6a51726df12c8b4d8040676"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2666"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.4)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-08T10:55:38.169333Z",
      "credit": [
        "Tatu Saloranta"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `org.apache.commons.jelly.impl.Embedded` (aka `commons-jelly`).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2682)\n- [Medium Post](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2020-04-08T00:42:23Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-564887",
      "identifiers": {
        "CVE": [
          "CVE-2020-11620"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-h4rc-386g-6m85"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-12T14:37:02.849327Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-04-08T00:42:23Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2682"
        },
        {
          "title": "Medium Post",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.4)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-08T10:59:04.995807Z",
      "credit": [
        "Tatu Saloranta"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `org.springframework.aop.config.MethodLocatingFactoryBean` (aka `spring-aop`).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Issues](https://github.com/FasterXML/jackson-databind/issues/2680)\n- [Medium Post](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2020-04-08T00:42:25Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-564888",
      "identifiers": {
        "CVE": [
          "CVE-2020-11619"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-12T14:37:00.233115Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-04-08T00:42:25Z",
      "references": [
        {
          "title": "GitHub Issues",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2680"
        },
        {
          "title": "Medium Post",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.4)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-05-29T15:36:30.302636Z",
      "credit": [
        "XuYuanzhen"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It is possible to conduct a Deserialization attack using the `com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool`  (`xalan2`) class gadget if polymorphic type handling is enabled and an application using this package allows user input which gets deserialized. \r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.5 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/840eae2ca81c597a0010b2126f32dce17d384b70)\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2704)\n",
      "disclosureTime": "2020-05-01T15:36:06Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.5"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-570625",
      "identifiers": {
        "CVE": [
          "CVE-2020-14062"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-23T15:44:48.450704Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-05-29T15:36:05Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/840eae2ca81c597a0010b2126f32dce17d384b70"
        },
        {
          "title": "Github Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2704"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.5)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-06-14T14:48:40.820120Z",
      "credit": [
        "Al1ex@knownsec"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.jsecurity.realm.jndi.JndiRealmFactory`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.5 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/f6d9c664f6d481703138319f6a0f1fdbddb3a259)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2765)\n",
      "disclosureTime": "2020-06-14T14:45:09Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.5"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.5)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.5)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572300",
      "identifiers": {
        "CVE": [
          "CVE-2020-14195"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-07-03T09:44:58.756442Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-06-14T15:32:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/f6d9c664f6d481703138319f6a0f1fdbddb3a259"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2765"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.5)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-06-15T10:29:46.691157Z",
      "credit": [
        "Topsec"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It is possible to conduct a Deserialization attack using the `oadd.org.apache.xalan.lib.sql.JNDIConnectionPool`  (`apache/drill`) class gadget if polymorphic type handling is enabled and an application using this package allows user input which gets deserialized. \r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.5 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/d1c67a0396e84c08d0558fbb843b5bd1f26e1921)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2688)\n- [Medium Article](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2020-06-15T10:23:33Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.5"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572314",
      "identifiers": {
        "CVE": [
          "CVE-2020-14060"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-23T15:44:28.959696Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-06-15T15:46:13Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/d1c67a0396e84c08d0558fbb843b5bd1f26e1921"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2688"
        },
        {
          "title": "Medium Article",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.5)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-06-15T11:03:46.232208Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It is possible to conduct a Deserialization attack using any of the following class gadget available within `weblogic/oracle-aqjms` if polymorphic type handling is enabled and an application using this package allows user input which gets deserialized. \r\n\r\n* oracle.jms.AQjmsQueueConnectionFactory\r\n* oracle.jms.AQjmsXATopicConnectionFactory\r\n* oracle.jms.AQjmsTopicConnectionFactory\r\n* oracle.jms.AQjmsXAQueueConnectionFactory\r\n* oracle.jms.AQjmsXAConnectionFactory\r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.5 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2698)\n- [Medium Article](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2020-06-15T10:59:39Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.5"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572316",
      "identifiers": {
        "CVE": [
          "CVE-2020-14061"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-06-23T15:43:52.618349Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-06-15T15:45:37Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2698"
        },
        {
          "title": "Medium Article",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.5)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "io.jsonwebtoken:jjwt-jackson@0.10.5",
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.9.8"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2019-07-02T11:09:01.582466Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to not sending `WINDOW_UPDATE` messages for the connection window, clients were able to cause server-side threads to block eventually leading to thread exhaustion and a DoS.\r\n\r\n**Note:** This vulnerability is due to an incomplete fix for [CVE-2019-0199](https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-174102).\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 8.5.40, 9.0.20 or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/df1a2c1b87c8a6c500ecdbbaf134c7f1491c8d79d98b48c6b9f0fa6a@%3Cannounce.tomcat.apache.org%3E)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/7f748eb)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/ada725a)\n- [Tomcat Security Advisory](http://tomcat.apache.org/security-9.html)\n",
      "disclosureTime": "2019-06-21T18:40:54Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "8.5.40",
        "9.0.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451342",
      "identifiers": {
        "CVE": [
          "CVE-2019-10072"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-06-12T14:36:56.480461Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-06-27T12:49:35Z",
      "references": [
        {
          "title": "Apache Security Advisory",
          "url": "https://lists.apache.org/thread.html/df1a2c1b87c8a6c500ecdbbaf134c7f1491c8d79d98b48c6b9f0fa6a@%3Cannounce.tomcat.apache.org%3E"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/7f748eb"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/ada725a"
        },
        {
          "title": "Tomcat Security Advisory",
          "url": "http://tomcat.apache.org/security-9.html"
        }
      ],
      "semver": {
        "vulnerable": [
          "[8.5.0, 8.5.40)",
          "[9.0.0.M1, 9.0.20)"
        ]
      },
      "severity": "high",
      "title": "Denial of Service (DoS)",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@2.1.2.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@9.0.14"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.1.6.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@2.1.6.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@9.0.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "9.0.14"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:F/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-07-02T11:18:18.168014Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Remote Code Execution due to a bug in the way the underlying Java Runtime Environment (JRE) passes command line arguments to windows systems when the option `enableCmdLineArguments` is enabled.\r\n\r\nThe CGI Servlet in Apache Tomcat when enabled, will pass user input to the underlying operating system for command line parsing. However, this process is not consistent and may allow the injection of additional arguments. This misconfiguration could be abused by attackers to execute code on an application's underlying operating system.\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.94, 8.5.40, 9.0.19 or higher.\n## References\n- [CodeWhite Security Blog](https://codewhitesec.blogspot.com/2016/02/java-and-command-line-injections-in-windows.html)\n- [Exploit DB](https://exploit-db.com/exploits/47073)\n- [Tomcat Security Advisory #7](https://tomcat.apache.org/security-7.html#Fixed_in_Apache_Tomcat_7.0.94)\n- [Tomcat Security Advisory #8](https://tomcat.apache.org/security-8.html#Fixed_in_Apache_Tomcat_8.5.40)\n- [Tomcat Security Advisory #9](https://tomcat.apache.org/security-9.html#Fixed_in_Apache_Tomcat_9.0.19)\n",
      "disclosureTime": "2019-04-15T11:47:05Z",
      "exploit": "Functional",
      "fixedIn": [
        "7.0.94",
        "8.5.40",
        "9.0.19"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451343",
      "identifiers": {
        "CVE": [
          "CVE-2019-0232"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-06-12T14:36:55.587885Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-17T11:46:33Z",
      "references": [
        {
          "title": "CodeWhite Security Blog",
          "url": "https://codewhitesec.blogspot.com/2016/02/java-and-command-line-injections-in-windows.html"
        },
        {
          "title": "Exploit DB",
          "url": "https://exploit-db.com/exploits/47073"
        },
        {
          "title": "Tomcat Security Advisory #7",
          "url": "https://tomcat.apache.org/security-7.html%23Fixed_in_Apache_Tomcat_7.0.94"
        },
        {
          "title": "Tomcat Security Advisory #8",
          "url": "https://tomcat.apache.org/security-8.html%23Fixed_in_Apache_Tomcat_8.5.40"
        },
        {
          "title": "Tomcat Security Advisory #9",
          "url": "https://tomcat.apache.org/security-9.html%23Fixed_in_Apache_Tomcat_9.0.19"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.94)",
          "[8.5.0,8.5.40)",
          "[9.0.0.M1,9.0.19)"
        ]
      },
      "severity": "high",
      "title": "Remote Code Execution",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@2.1.2.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@9.0.14"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.1.5.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@2.1.5.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@9.0.19"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "9.0.14"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-07-03T08:26:23.558091Z",
      "credit": [
        "Nightwatch Cybersecurity Research"
      ],
      "cvssScore": 3.5,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the SSI `printenv` command. \r\n\r\nNote: Server Side Includes (SSI) is disabled by default and is intended for debugging purposes only.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 9.0.18, 8.5.40, 7.0.94 or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/6e6e9eacf7b28fd63d249711e9d3ccd4e0a83f556e324aee37be5a8c@%3Cannounce.tomcat.apache.org%3E)\n",
      "disclosureTime": "2019-05-17T22:45:19Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "9.0.18",
        "8.5.40",
        "7.0.94"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451458",
      "identifiers": {
        "CVE": [
          "CVE-2019-0221"
        ],
        "CWE": [
          "CWE-79"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-06-12T14:36:56.164899Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-05-28T22:45:19Z",
      "references": [
        {
          "title": "Apache Security Advisory",
          "url": "https://lists.apache.org/thread.html/6e6e9eacf7b28fd63d249711e9d3ccd4e0a83f556e324aee37be5a8c@%3Cannounce.tomcat.apache.org%3E"
        }
      ],
      "semver": {
        "vulnerable": [
          "[9.0.0.M1, 9.0.18)",
          "[8.5.0, 8.5.40)",
          "[7.0.0, 7.0.94)"
        ]
      },
      "severity": "low",
      "title": "Cross-site Scripting (XSS)",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@2.1.2.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@9.0.14"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.1.5.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@2.1.5.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@9.0.19"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "9.0.14"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2019-07-03T08:30:50.186492Z",
      "credit": [
        "Michal Karm"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The `HTTP/2` implementation accepted streams with excessive numbers of `SETTINGS` frames and also permitted clients to keep streams open without reading/writing request/response data. By keeping streams open for requests that utilised the Servlet API's blocking I/O, clients were able to cause server-side threads to block eventually leading to thread exhaustion.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 8.5.38, 9.0.16 or higher.\n## References\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1693325)\n- [TomCat Security Advisory #8](http://tomcat.apache.org/security-8.html)\n- [TomCat Security Advisory #9](http://tomcat.apache.org/security-9.html)\n",
      "disclosureTime": "2019-03-25T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "8.5.38",
        "9.0.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451459",
      "identifiers": {
        "CVE": [
          "CVE-2019-0199"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-qcxh-w3j9-58qr"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-06-12T14:37:03.058365Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-04T00:00:00Z",
      "references": [
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1693325"
        },
        {
          "title": "TomCat Security Advisory #8",
          "url": "http://tomcat.apache.org/security-8.html"
        },
        {
          "title": "TomCat Security Advisory #9",
          "url": "http://tomcat.apache.org/security-9.html"
        }
      ],
      "semver": {
        "vulnerable": [
          "[8.5.0, 8.5.38)",
          "[9.0.0.M1, 9.0.16)"
        ]
      },
      "severity": "high",
      "title": "Denial of Service (DoS)",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@2.1.2.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@9.0.14"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.1.3.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@2.1.3.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@9.0.16"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "9.0.14"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-12-20T15:26:08.265027Z",
      "credit": [
        "William Marlow (IBM)"
      ],
      "cvssScore": 3.1,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Session Fixation. When using FORM authentication there was a narrow window where an attacker could perform a session fixation attack. The window was considered too narrow for an exploit to be practical but, erring on the side of caution, this issue has been treated as a security vulnerability.\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 9.0.30, 8.5.50, 7.0.99 or higher.\n## References\n- [GitHub Commit](https://github.com/apache/tomcat/commit/e19a202)\n- [Tomcat Security Advisory 7](https://tomcat.apache.org/security-7.html)\n- [Tomcat Security Advisory 8](https://tomcat.apache.org/security-8.html)\n- [Tomcat Security Advisory 9](https://tomcat.apache.org/security-9.html)\n",
      "disclosureTime": "2019-12-18T15:13:41Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "9.0.30",
        "8.5.50",
        "7.0.99"
      ],
      "functions": [
        {
          "functionId": {
            "className": "FormAuthenticator",
            "filePath": "org/apache/catalina/authenticator/FormAuthenticator.java",
            "functionName": "authenticate"
          },
          "version": [
            "[9.0.0.M1, 9.0.0.M10)",
            "[8.5.0, 8.5.5)",
            "[,7.0.99)"
          ]
        },
        {
          "functionId": {
            "className": "FormAuthenticator",
            "filePath": "org/apache/catalina/authenticator/FormAuthenticator.java",
            "functionName": "doAuthenticate"
          },
          "version": [
            "[9.0.0.M10, 9.0.30)",
            "[8.5.5,8.5.50)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.apache.catalina.authenticator.FormAuthenticator",
            "functionName": "authenticate"
          },
          "version": [
            "[9.0.0.M1, 9.0.0.M10)",
            "[8.5.0, 8.5.5)",
            "[,7.0.99)"
          ]
        },
        {
          "functionId": {
            "className": "org.apache.catalina.authenticator.FormAuthenticator",
            "functionName": "doAuthenticate"
          },
          "version": [
            "[9.0.0.M10, 9.0.30)",
            "[8.5.5,8.5.50)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-538488",
      "identifiers": {
        "CVE": [
          "CVE-2019-17563"
        ],
        "CWE": [
          "CWE-384"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-06-12T14:36:55.569641Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-12-20T15:13:36Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/e19a202"
        },
        {
          "title": "Tomcat Security Advisory 7",
          "url": "https://tomcat.apache.org/security-7.html"
        },
        {
          "title": "Tomcat Security Advisory 8",
          "url": "https://tomcat.apache.org/security-8.html"
        },
        {
          "title": "Tomcat Security Advisory 9",
          "url": "https://tomcat.apache.org/security-9.html"
        }
      ],
      "semver": {
        "vulnerable": [
          "[9.0.0.M1, 9.0.30)",
          "[8.5.0,8.5.50)",
          "[,7.0.99)"
        ]
      },
      "severity": "low",
      "title": "Session Fixation",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@2.1.2.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@9.0.14"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "9.0.14"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-12-20T15:35:05.758130Z",
      "credit": [
        "An Trinh of Viettel Cyber Security"
      ],
      "cvssScore": 7.8,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Privilege Escalation. When Tomcat is configured with the JMX Remote Lifecycle Listener, a local attacker without access to the Tomcat process or configuration files is able to manipulate the RMI registry to perform a man-in-the-middle attack to capture user names and passwords used to access the JMX interface. The attacker can then use these credentials to access the JMX interface and gain complete control over the Tomcat instance.\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 9.0.29, 8.5.49, 7.0.99 or higher.\n## References\n- [GitHub Commit](https://github.com/apache/tomcat/commit/a91d7db)\n- [Tomcat Security Advisory 7](https://tomcat.apache.org/security-7.html)\n- [Tomcat Security Advisory 8](https://tomcat.apache.org/security-8.html)\n- [Tomcat Security Advisory 9](https://tomcat.apache.org/security-9.html)\n",
      "disclosureTime": "2019-12-18T15:31:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "9.0.29",
        "8.5.49",
        "7.0.99"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-538490",
      "identifiers": {
        "CVE": [
          "CVE-2019-12418"
        ],
        "CWE": [
          "CWE-264"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-06-12T14:37:00.766375Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-12-20T15:30:58Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/a91d7db"
        },
        {
          "title": "Tomcat Security Advisory 7",
          "url": "https://tomcat.apache.org/security-7.html"
        },
        {
          "title": "Tomcat Security Advisory 8",
          "url": "https://tomcat.apache.org/security-8.html"
        },
        {
          "title": "Tomcat Security Advisory 9",
          "url": "https://tomcat.apache.org/security-9.html"
        }
      ],
      "semver": {
        "vulnerable": [
          "[9.0.0.M1, 9.0.29)",
          "[8.5.0, 8.5.49)",
          "[,7.0.99)"
        ]
      },
      "severity": "high",
      "title": "Privilege Escalation",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@2.1.2.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@9.0.14"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.1.11.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@2.1.11.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@9.0.29"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "9.0.14"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:F",
      "alternativeIds": [],
      "creationTime": "2020-05-21T15:46:46.394901Z",
      "credit": [
        "Apache Tomcat Security Team"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE). If an attacker is able to control the contents and name of a file on the server; and the server is configured to use the PersistenceManager with a FileStore; and the PersistenceManager is configured with sessionAttributeValueClassNameFilter=\"null\" (the default unless a SecurityManager is used) or a sufficiently lax filter to allow the attacker provided object to be deserialized; and the attacker knows the relative file path from the storage location used by FileStore to the file the attacker has control over; then, using a specifically crafted request, the attacker will be able to trigger remote code execution via deserialization of the file under their control.\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 10.0.0-M5, 9.0.35, 8.5.55, 7.0.104 or higher.\n## References\n- [Exploit Code](https://github.com/masahiro331/CVE-2020-9484)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/3aa8f28db7efb311cdd1b6fe15a9cd3b167a2222)\n",
      "disclosureTime": "2020-05-21T07:10:43Z",
      "exploit": "Functional",
      "fixedIn": [
        "10.0.0-M5",
        "9.0.35",
        "8.5.55",
        "7.0.104"
      ],
      "functions": [
        {
          "functionId": {
            "className": "FileStore",
            "filePath": "org/apache/catalina/session/FileStore.java",
            "functionName": "file"
          },
          "version": [
            "[10.0.0-M1, 10.0.0-M5)",
            "[9.0.0M1, 9.0.35)",
            "[8.5.0, 8.5.55)",
            "[7.0.0, 7.0.104)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.apache.catalina.session.FileStore",
            "functionName": "file"
          },
          "version": [
            "[10.0.0-M1, 10.0.0-M5)",
            "[9.0.0M1, 9.0.35)",
            "[8.5.0, 8.5.55)",
            "[7.0.0, 7.0.104)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-570072",
      "identifiers": {
        "CVE": [
          "CVE-2020-9484"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-06-23T07:42:56.372341Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-05-20T07:22:27Z",
      "references": [
        {
          "title": "Exploit Code",
          "url": "https://github.com/masahiro331/CVE-2020-9484"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/3aa8f28db7efb311cdd1b6fe15a9cd3b167a2222"
        }
      ],
      "semver": {
        "vulnerable": [
          "[10.0.0-M1, 10.0.0-M5)",
          "[9.0.0M1, 9.0.35)",
          "[8.5.0, 8.5.55)",
          "[7.0.0, 7.0.104)"
        ]
      },
      "severity": "high",
      "title": "Remote Code Execution (RCE)",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@2.1.2.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@9.0.14"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "9.0.14"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2020-07-15T10:19:05.157835Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). An `h2c` direct connection did not release the `HTTP/1.1` processor after the upgrade to `HTTP/2`. If a sufficient number of such requests are made, an `OutOfMemoryException` could occur leading to a denial of service.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 10.0.0-M7, 9.0.37, 8.5.57 or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/r61f411cf82488d6ec213063fc15feeeb88e31b0ca9c29652ee4f962e%40%3Cannounce.tomcat.apache.org%3E)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/172977f04a5215128f1e278a688983dcd230f399)\n",
      "disclosureTime": "2020-07-15T09:39:15Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "10.0.0-M7",
        "9.0.37",
        "8.5.57"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-584427",
      "identifiers": {
        "CVE": [
          "CVE-2020-13934"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-07-15T16:40:14.629224Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-07-15T16:40:14.601976Z",
      "references": [
        {
          "title": "Apache Security Advisory",
          "url": "https://lists.apache.org/thread.html/r61f411cf82488d6ec213063fc15feeeb88e31b0ca9c29652ee4f962e%40%3Cannounce.tomcat.apache.org%3E"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/172977f04a5215128f1e278a688983dcd230f399"
        }
      ],
      "semver": {
        "vulnerable": [
          "[10.0.0-M1,10.0.0-M7)",
          "[9.0.0.M5, 9.0.37)",
          "[8.5.1,8.5.57)"
        ]
      },
      "severity": "medium",
      "title": "Denial of Service (DoS)",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@2.1.2.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@9.0.14"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "9.0.14"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-01-09T14:42:57.957518Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[org.hibernate.validator:hibernate-validator](https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator) is a Hibernate Validator Engine Relocation Artifact.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). The `SafeHtml` validator annotation fails to properly sanitize payloads consisting of potentially malicious code in HTML comments and instructions.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `org.hibernate.validator:hibernate-validator` to version 6.0.18.Final, 6.1.0.Final or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/r87b7e2d22982b4ca9f88f5f4f22a19b394d2662415b233582ed22ebf@%3Cnotifications.accumulo.apache.org%3E)\n- [GitHub Commit](https://github.com/hibernate/hibernate-validator/commit/124b7dd6d9a4ad24d4d49f74701f05a13e56ceee)\n- [Hibernator Security Release Blog](https://in.relation.to/2019/11/20/hibernate-validator-610-6018-released/)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-10219)\n",
      "disclosureTime": "2018-10-18T14:55:21Z",
      "exploit": "Unproven",
      "fixedIn": [
        "6.0.18.Final",
        "6.1.0.Final"
      ],
      "functions": [
        {
          "functionId": {
            "className": "SafeHtmlValidator",
            "filePath": "org/hibernate/validator/internal/constraintvalidators/hv/SafeHtmlValidator.java",
            "functionName": "getFragmentAsDocument"
          },
          "version": [
            "[,6.0.18.Final)",
            "[6.1.0.Alpha1,6.1.0.Final)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.hibernate.validator.internal.constraintvalidators.hv.SafeHtmlValidator",
            "functionName": "getFragmentAsDocument"
          },
          "version": [
            "[,6.0.18.Final)",
            "[6.1.0.Alpha1,6.1.0.Final)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGHIBERNATEVALIDATOR-541187",
      "identifiers": {
        "CVE": [
          "CVE-2019-10219"
        ],
        "CWE": [
          "CWE-79"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "hibernate-validator",
        "groupId": "org.hibernate.validator"
      },
      "modificationTime": "2020-06-23T07:38:02.862341Z",
      "moduleName": "org.hibernate.validator:hibernate-validator",
      "packageManager": "maven",
      "packageName": "org.hibernate.validator:hibernate-validator",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-09T14:55:12Z",
      "references": [
        {
          "title": "Apache Security Advisory",
          "url": "https://lists.apache.org/thread.html/r87b7e2d22982b4ca9f88f5f4f22a19b394d2662415b233582ed22ebf@%3Cnotifications.accumulo.apache.org%3E"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/hibernate/hibernate-validator/commit/124b7dd6d9a4ad24d4d49f74701f05a13e56ceee"
        },
        {
          "title": "Hibernator Security Release Blog",
          "url": "https://in.relation.to/2019/11/20/hibernate-validator-610-6018-released/"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-10219"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,6.0.18.Final)",
          "[6.1.0.Alpha1,6.1.0.Final)"
        ]
      },
      "severity": "medium",
      "title": "Cross-site Scripting (XSS)",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE",
        "org.hibernate.validator:hibernate-validator@6.0.14.Final"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.1.10.RELEASE",
        "org.hibernate.validator:hibernate-validator@6.0.18.Final"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.hibernate.validator:hibernate-validator",
      "version": "6.0.14.Final"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2020-05-05T12:05:58.552935Z",
      "credit": [
        "Alvaro Muñoz"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[org.hibernate.validator:hibernate-validator](https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator) is a Hibernate Validator Engine Relocation Artifact.\n\nAffected versions of this package are vulnerable to Improper Input Validation. A bug in the message interpolation processor enables invalid EL expressions to be evaluated as if they were valid. This flaw allows attackers to bypass input sanitation (escaping, stripping) controls that developers may have put in place when handling user-controlled data in error messages.\n## Remediation\nUpgrade `org.hibernate.validator:hibernate-validator` to version 6.0.19.Final, 6.1.3.Final or higher.\n## References\n- [GitHub PR](https://github.com/hibernate/hibernate-validator/pull/1071)\n- [Jira Issue](https://hibernate.atlassian.net/browse/HV-1758)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1805501)\n",
      "disclosureTime": "2020-05-05T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.0.19.Final",
        "6.1.3.Final"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ValidatorImpl",
            "filePath": "org/hibernate/validator/internal/engine/ValidatorImpl.java",
            "functionName": "validate"
          },
          "version": [
            "[,6.0.19.Final)",
            "[6.1.0,6.1.3.Final)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.hibernate.validator.internal.engine.ValidatorImpl",
            "functionName": "validate"
          },
          "version": [
            "[,6.0.19.Final)",
            "[6.1.0,6.1.3.Final)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGHIBERNATEVALIDATOR-568163",
      "identifiers": {
        "CVE": [
          "CVE-2020-10693"
        ],
        "CWE": [
          "CWE-20"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "hibernate-validator",
        "groupId": "org.hibernate.validator"
      },
      "modificationTime": "2020-07-06T10:07:04.551592Z",
      "moduleName": "org.hibernate.validator:hibernate-validator",
      "packageManager": "maven",
      "packageName": "org.hibernate.validator:hibernate-validator",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-05-05T16:32:46Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/hibernate/hibernate-validator/pull/1071"
        },
        {
          "title": "Jira Issue",
          "url": "https://hibernate.atlassian.net/browse/HV-1758"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1805501"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,6.0.19.Final)",
          "[6.1.0,6.1.3.Final)"
        ]
      },
      "severity": "medium",
      "title": "Improper Input Validation",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE",
        "org.hibernate.validator:hibernate-validator@6.0.14.Final"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "org.hibernate.validator:hibernate-validator",
      "version": "6.0.14.Final"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-06-05T11:18:21.077412Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[org.postgresql:postgresql](https://mvnrepository.com/artifact/org.postgresql/postgresql) is a Java JDBC 4.2 (JRE 8+) driver for PostgreSQL database.\n\nAffected versions of this package are vulnerable to XML External Entity (XXE) Injection. The `PgSQLXML` class used for parsing was found to allow external entities and multiple doc types which could allow XXE attacks.\n\n## Details\nXXE Injection is a type of attack against an application that parses XML input.\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. By default, many XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. When an XML document is being parsed, the parser can make a request and include the content at the specified URI inside of the XML document.\n\nAttacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.\n\nFor example, below is a sample XML document, containing an XML element- username.\n\n```xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n   <username>John</username>\n</xml>\n```\n\nAn external XML entity - `xxe`, is defined using a system identifier and present within a DOCTYPE header. These entities can access local or remote content. For example the below code contains an external XML entity that would fetch the content of  `/etc/passwd` and display it to the user rendered by `username`.\n\n```xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE foo [\n   <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\n   <username>&xxe;</username>\n</xml>\n```\n\nOther XXE Injection attacks can access local resources that may not stop returning data, possibly impacting application availability and leading to Denial of Service.\n## Remediation\nUpgrade `org.postgresql:postgresql` to version 42.2.13 or higher.\n## References\n- [GitHub Commit](https://github.com/pgjdbc/pgjdbc/commit/14b62aca4764d496813f55a43d050b017e01eb65)\n- [Release Notes](https://jdbc.postgresql.org/documentation/changelog.html#version_42.2.13)\n",
      "disclosureTime": "2020-06-05T11:14:37Z",
      "exploit": "Unproven",
      "fixedIn": [
        "42.2.13"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGPOSTGRESQL-571481",
      "identifiers": {
        "CVE": [
          "CVE-2020-13692"
        ],
        "CWE": [
          "CWE-611"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "postgresql",
        "groupId": "org.postgresql"
      },
      "modificationTime": "2020-06-09T17:44:48.173405Z",
      "moduleName": "org.postgresql:postgresql",
      "packageManager": "maven",
      "packageName": "org.postgresql:postgresql",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-06-05T13:44:59Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/pgjdbc/pgjdbc/commit/14b62aca4764d496813f55a43d050b017e01eb65"
        },
        {
          "title": "Release Notes",
          "url": "https://jdbc.postgresql.org/documentation/changelog.html%23version_42.2.13"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,42.2.13)"
        ]
      },
      "severity": "high",
      "title": "XML External Entity (XXE) Injection",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "org.postgresql:postgresql@42.2.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "org.postgresql:postgresql",
      "version": "42.2.5"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-03-05T15:02:31.577470Z",
      "credit": [
        "Roman Shalymov"
      ],
      "cvssScore": 8,
      "description": "## Overview\n[org.springframework:spring-web](https://github.com/spring-projects/spring-framework) is a package that provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.\n\nAffected versions of this package are vulnerable to Reflected File Download (RFD). A reflected file download attack is possible when the filename attribute of the `Content-Disposition` header is derived from user-supplied input.\n## Remediation\nUpgrade `org.springframework:spring-web` to version 5.2.3, 5.1.13, 5.0.16 or higher.\n## References\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76)\n- [GitHub Issue](https://github.com/spring-projects/spring-framework/issues/24220)\n- [Pivotal Vulnerability Report](https://pivotal.io/security/cve-2020-5398)\n",
      "disclosureTime": "2020-01-16T13:47:43Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "5.2.3",
        "5.1.13",
        "5.0.16"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ContentDisposition$Builder",
            "filePath": "org/springframework/http/ContentDisposition$Builder.java",
            "functionName": "filename"
          },
          "version": [
            "[5.2.0, 5.2.3)",
            "[5.1.0, 5.1.13)",
            "[5.0.0, 5.0.16)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.springframework.http.ContentDisposition$Builder",
            "functionName": "filename"
          },
          "version": [
            "[5.2.0, 5.2.3)",
            "[5.1.0, 5.1.13)",
            "[5.0.0, 5.0.16)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-559346",
      "identifiers": {
        "CVE": [
          "CVE-2020-5398"
        ],
        "CWE": [
          "CWE-494"
        ],
        "GHSA": [
          "GHSA-8wx2-9q48-vm9r"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "spring-web",
        "groupId": "org.springframework"
      },
      "modificationTime": "2020-06-12T14:36:55.561710Z",
      "moduleName": "org.springframework:spring-web",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-web",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-22T13:47:42Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/spring-projects/spring-framework/issues/24220"
        },
        {
          "title": "Pivotal Vulnerability Report",
          "url": "https://pivotal.io/security/cve-2020-5398"
        }
      ],
      "semver": {
        "vulnerable": [
          "[5.2.0, 5.2.3)",
          "[5.1.0, 5.1.13)",
          "[5.0.0, 5.0.16)"
        ]
      },
      "severity": "high",
      "title": "Reflected File Download (RFD)",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE",
        "org.springframework:spring-web@5.1.4.RELEASE"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "org.springframework:spring-web",
      "version": "5.1.4.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:U/RL:T/RC:U",
      "alternativeIds": [],
      "creationTime": "2019-12-12T13:08:53.753033Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 4.3,
      "description": "## Overview\n[org.yaml:snakeyaml](https://code.google.com/p/snakeyaml/source/browse/) is a YAML 1.1 parser and emitter for Java.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The Alias feature in SnakeYAML 1.18 allows entity expansion during a load operation, a related issue to CVE-2003-1564.\r\n\r\n*Note* While the Maintainer acknowledges the existence of the issue, they believe it should be solved by sanitizing the `inputStream` to the parser\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\nUpgrade `org.yaml:snakeyaml` to version 1.26 or higher.\n## References\n- [Bitbucket Commit](https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c)\n- [Bitbucket Issue](https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion)\n- [Maintainer Report](https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack)\n- [Proof Of Concept](https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222)\n",
      "disclosureTime": "2019-12-12T03:28:21Z",
      "exploit": "Unproven",
      "fixedIn": [
        "1.26"
      ],
      "functions": [
        {
          "functionId": {
            "className": "Composer",
            "filePath": "org/yaml/snakeyaml/composer/Composer.java",
            "functionName": "composeNode"
          },
          "version": [
            "[,1.26)"
          ]
        },
        {
          "functionId": {
            "className": "BaseConstructor",
            "filePath": "org/yaml/snakeyaml/constructor/BaseConstructor.java",
            "functionName": "constructMapping2ndStep"
          },
          "version": [
            "[,1.26)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.yaml.snakeyaml.composer.Composer",
            "functionName": "composeNode"
          },
          "version": [
            "[,1.26)"
          ]
        },
        {
          "functionId": {
            "className": "org.yaml.snakeyaml.constructor.BaseConstructor",
            "functionName": "constructMapping2ndStep"
          },
          "version": [
            "[,1.26)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGYAML-537645",
      "identifiers": {
        "CVE": [
          "CVE-2017-18640"
        ],
        "CWE": [
          "CWE-189"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "snakeyaml",
        "groupId": "org.yaml"
      },
      "modificationTime": "2020-06-12T14:37:03.328628Z",
      "moduleName": "org.yaml:snakeyaml",
      "packageManager": "maven",
      "packageName": "org.yaml:snakeyaml",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-12-19T03:28:21Z",
      "references": [
        {
          "title": "Bitbucket Commit",
          "url": "https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c"
        },
        {
          "title": "Bitbucket Issue",
          "url": "https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion"
        },
        {
          "title": "Maintainer Report",
          "url": "https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack"
        },
        {
          "title": "Proof Of Concept",
          "url": "https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,1.26)"
        ]
      },
      "severity": "medium",
      "title": "Denial of Service (DoS)",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter@2.1.2.RELEASE",
        "org.yaml:snakeyaml@1.23"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "org.yaml:snakeyaml",
      "version": "1.23"
    },
    {
      "license": "(EPL-1.0 OR LGPL-2.0)",
      "semver": {
        "vulnerable": [
          "[0.9.18,)"
        ]
      },
      "id": "snyk:lic:maven:ch.qos.logback:logback-classic:(EPL-1.0_OR_LGPL-2.0)",
      "type": "license",
      "packageManager": "maven",
      "language": "java",
      "packageName": "ch.qos.logback:logback-classic",
      "title": "Dual license: EPL-1.0, LGPL-2.0",
      "description": "Dual license: EPL-1.0, LGPL-2.0",
      "publicationTime": "2020-07-25T03:34:27.243Z",
      "creationTime": "2020-07-25T03:34:27.243Z",
      "licenseTemplateUrl": [
        "https://raw.githubusercontent.com/spdx/license-list/master/EPL-1.0.txt",
        "https://raw.githubusercontent.com/spdx/license-list/master/LGPL-2.0.txt"
      ],
      "severity": "medium",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter@2.1.2.RELEASE",
        "org.springframework.boot:spring-boot-starter-logging@2.1.2.RELEASE",
        "ch.qos.logback:logback-classic@1.2.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ch.qos.logback:logback-classic",
      "version": "1.2.3"
    },
    {
      "license": "(EPL-1.0 OR LGPL-2.0)",
      "semver": {
        "vulnerable": [
          "[0.9.18,)"
        ]
      },
      "id": "snyk:lic:maven:ch.qos.logback:logback-core:(EPL-1.0_OR_LGPL-2.0)",
      "type": "license",
      "packageManager": "maven",
      "language": "java",
      "packageName": "ch.qos.logback:logback-core",
      "title": "Dual license: EPL-1.0, LGPL-2.0",
      "description": "Dual license: EPL-1.0, LGPL-2.0",
      "publicationTime": "2020-07-25T03:34:27.685Z",
      "creationTime": "2020-07-25T03:34:27.685Z",
      "licenseTemplateUrl": [
        "https://raw.githubusercontent.com/spdx/license-list/master/EPL-1.0.txt",
        "https://raw.githubusercontent.com/spdx/license-list/master/LGPL-2.0.txt"
      ],
      "severity": "medium",
      "from": [
        "com.scalesec:vulnado@0.0.1-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter@2.1.2.RELEASE",
        "org.springframework.boot:spring-boot-starter-logging@2.1.2.RELEASE",
        "ch.qos.logback:logback-classic@1.2.3",
        "ch.qos.logback:logback-core@1.2.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ch.qos.logback:logback-core",
      "version": "1.2.3"
    }
  ],
  "ok": false,
  "dependencyCount": 40,
  "org": "scott.esbrandt-ww8",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.19.0\nignore: {}\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {},
    "orgLicenseRules": {
      "AGPL-1.0": {
        "licenseType": "AGPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "AGPL-3.0": {
        "licenseType": "AGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "Artistic-1.0": {
        "licenseType": "Artistic-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "Artistic-2.0": {
        "licenseType": "Artistic-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "CDDL-1.0": {
        "licenseType": "CDDL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "CPOL-1.02": {
        "licenseType": "CPOL-1.02",
        "severity": "high",
        "instructions": ""
      },
      "EPL-1.0": {
        "licenseType": "EPL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "GPL-2.0": {
        "licenseType": "GPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "GPL-3.0": {
        "licenseType": "GPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "LGPL-2.0": {
        "licenseType": "LGPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1": {
        "licenseType": "LGPL-2.1",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1+": {
        "licenseType": "LGPL-2.1+",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0": {
        "licenseType": "LGPL-3.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0+": {
        "licenseType": "LGPL-3.0+",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-1.1": {
        "licenseType": "MPL-1.1",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-2.0": {
        "licenseType": "MPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "MS-RL": {
        "licenseType": "MS-RL",
        "severity": "medium",
        "instructions": ""
      },
      "SimPL-2.0": {
        "licenseType": "SimPL-2.0",
        "severity": "high",
        "instructions": ""
      }
    }
  },
  "packageManager": "maven",
  "ignoreSettings": {
    "adminOnly": false,
    "reasonRequired": false,
    "disregardFilesystemIgnores": false
  },
  "summary": "43 vulnerable dependency paths",
  "remediation": {
    "unresolved": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-07-29T14:55:33.030000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. `SubTypeValidator.java` mishandles default typing when `ehcache` is used, leading to remote code execution.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9.2, 2.8.11.4, 2.7.9.6 or higher.\n## References\n- [GitHub Comparison](https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.1...jackson-databind-2.9.9.2)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2387)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2389)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2395)\n- [Snyk Blog](https://snyk.io/blog/jackson-deserialization-vulnerability/)\n",
        "disclosureTime": "2019-07-29T12:40:42Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.9.9.2",
          "2.8.11.4",
          "2.7.9.6"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.9.0,2.9.9.2)",
              "[2.8.0,2.8.11.4)",
              "[,2.7.9.6)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.9.0,2.9.9.2)",
              "[2.8.0,2.8.11.4)",
              "[,2.7.9.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-455617",
        "identifiers": {
          "CVE": [
            "CVE-2019-14379",
            "CVE-2019-14439"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-06-24T12:22:00.952183Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-07-29T12:40:42Z",
        "references": [
          {
            "title": "GitHub Comparison",
            "url": "https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.1...jackson-databind-2.9.9.2"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2387"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2389"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2395"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/jackson-deserialization-vulnerability/"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.9.0,2.9.9.2)",
            "[2.8.0,2.8.11.4)",
            "[,2.7.9.6)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-09-16T13:03:06.837179Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered as `com.zaxxer.hikari.HikariDataSource` was not blocked.\r\n**Note:** This is a different vulnerability than CVE-2019-14540.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.10.0.pr3, 2.9.10 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/73c1c2cc76e6cdd7f3a5615cbe3207fe96e4d3db)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2449)\n",
        "disclosureTime": "2019-09-15T23:30:24Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.10.0.pr3",
          "2.9.10"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.10.pr2)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.10.pr2)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467014",
        "identifiers": {
          "CVE": [
            "CVE-2019-16335"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-06-12T14:37:03.810019Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-09-16T23:30:24Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/73c1c2cc76e6cdd7f3a5615cbe3207fe96e4d3db"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2449"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.10.0.pr1,2.10.0.pr3)",
            "[,2.9.10)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-09-16T13:03:10.401907Z",
        "credit": [
          "iSafeBlue"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered as `com.zaxxer.hikari.HikariConfig` was not blocked.\r\n**Note:** This is a different vulnerability than CVE-2019-16335.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.10.0.pr2, 2.9.10 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/d4983c740fec7d5576b207a8c30a63d3ea7443de)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2410)\n",
        "disclosureTime": "2019-09-15T23:27:25Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.10.0.pr2",
          "2.9.10"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.10.0.pr2)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.10.0.pr2)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467015",
        "identifiers": {
          "CVE": [
            "CVE-2019-14540"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-06-12T14:37:03.331983Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-09-16T23:27:25Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/d4983c740fec7d5576b207a8c30a63d3ea7443de"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2410"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.10.0.pr1,2.10.0.pr2)",
            "[,2.9.10)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-09-16T14:43:42.115110Z",
        "credit": [
          "Tatu Saloranta"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. None\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.10.0.pr2, 2.9.10 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/d4983c740fec7d5576b207a8c30a63d3ea7443de)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2420)\n",
        "disclosureTime": "2019-09-16T14:37:38Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.10.0.pr2",
          "2.9.10"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.10.0.pr1,2.10.0.pr2)",
              "[,2.9.10)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.10.0.pr1,2.10.0.pr2)",
              "[,2.9.10)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467016",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-06-12T14:37:03.592158Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-09-16T14:37:37Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/d4983c740fec7d5576b207a8c30a63d3ea7443de"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2420"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.10.0.pr1,2.10.0.pr2)",
            "[,2.9.10)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-10-02T08:02:18.178548Z",
        "credit": [
          "bsmali4"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered within `org.apache.commons.dbcp.datasources.SharedPoolDataSource` was not blocked. An attacker could leverage this gadget type  to perform Remote Code Execution attacks through deserialization.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.1 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/9593e16cf5a3d289a9c584f7123639655de9ddac)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2478)\n",
        "disclosureTime": "2019-10-01T17:43:33Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.9.10.1"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.10.1)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.10.1)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-469674",
        "identifiers": {
          "CVE": [
            "CVE-2019-16942"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-06-12T14:37:01.427620Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-10-02T17:43:33Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/9593e16cf5a3d289a9c584f7123639655de9ddac"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2478"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.9.10.1)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-10-02T08:03:39.391997Z",
        "credit": [
          "bsmali4"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered as `com.p6spy.engine.spy.P6DataSource` was not blocked. An attacker could leverage this gadget type  to perform Remote Code Execution attacks through deserialization.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.1 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/9593e16cf5a3d289a9c584f7123639655de9ddac)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2478)\n",
        "disclosureTime": "2019-10-01T17:43:33Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.9.10.1"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.10.1)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.10.1)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-469676",
        "identifiers": {
          "CVE": [
            "CVE-2019-16943"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-06-12T14:36:55.932819Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-10-02T17:43:33Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/9593e16cf5a3d289a9c584f7123639655de9ddac"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2478"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.9.10.1)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-10-07T10:05:31.629572Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered related to `net.sf.ehcache.hibernate.EhcacheJtaTransactionManagerLookup`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/191a4cdf87b56d2ddddb77edd895ee756b7f75eb)\n- [GitHub Comparison](https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.3...jackson-databind-2.9.10)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2460)\n",
        "disclosureTime": "2019-10-07T01:14:26Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.9.10"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.10)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.10)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-471943",
        "identifiers": {
          "CVE": [
            "CVE-2019-17267"
          ],
          "CWE": [
            "CWE-502"
          ],
          "GHSA": [
            "GHSA-f3j5-rmmp-3fc5"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-06-12T14:36:55.553486Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-10-07T01:14:26Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/191a4cdf87b56d2ddddb77edd895ee756b7f75eb"
          },
          {
            "title": "GitHub Comparison",
            "url": "https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.3...jackson-databind-2.9.10"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2460"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.9.10)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-10-13T07:40:03.046000Z",
        "credit": [
          "Zhangxianhui"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. When Default Typing is enabled for an externally exposed JSON endpoint and the service has the apache-log4j-extra (version 1.2.x) jar in the classpath, and an attacker can provide a JNDI service to access, it is possible to make the service execute a malicious payload.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.1 or higher.\n## References\n- [Blog Post](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/b5a304a98590b6bb766134f9261e6566dcbbb6d0)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2498)\n",
        "disclosureTime": "2019-10-12T21:52:10Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.9.10.1"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.10.1)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.10.1)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-472980",
        "identifiers": {
          "CVE": [
            "CVE-2019-17531"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-06-12T14:36:55.935470Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-10-13T07:41:55Z",
        "references": [
          {
            "title": "Blog Post",
            "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/b5a304a98590b6bb766134f9261e6566dcbbb6d0"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2498"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.10.1)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-01-03T10:26:22.562970Z",
        "credit": [
          "UltramanGaia"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. Two additional `net.sf.ehcache` gadgets are not blacklisted.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.2 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/fc4214a883dc087070f25da738ef0d49c2f3387e)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2526)\n",
        "disclosureTime": "2020-01-03T05:14:08Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.9.10.2"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0,2.9.10.2)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0,2.9.10.2)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-540500",
        "identifiers": {
          "CVE": [
            "CVE-2019-20330"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-06-12T14:37:03.729091Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-03T05:14:08Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/fc4214a883dc087070f25da738ef0d49c2f3387e"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2526"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.9.10.2)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-02-11T07:57:04.144993Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507)). \r\nIt lacks `xbean-reflect/JNDI` blocking, as demonstrated by `org.apache.xbean.propertyeditor.JndiConverter`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.8.11.5, 2.9.10.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/914e7c9f2cb8ce66724bf26a72adc7e958992497)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2620)\n",
        "disclosureTime": "2020-02-09T21:12:38Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.8.11.5",
          "2.9.10.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11.5)",
              "[2.9.0,2.9.10.3)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11.5)",
              "[2.9.0,2.9.10.3)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-548451",
        "identifiers": {
          "CVE": [
            "CVE-2020-8840"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-04-29T14:47:54.226800Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-02-11T21:12:38Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/914e7c9f2cb8ce66724bf26a72adc7e958992497"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2620"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.8.11.5)",
            "[2.9.0,2.9.10.3)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-02T10:29:31.222015Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. Mishandles the interaction between serialization gadgets and typing, related to:\r\n\r\n* `com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig` (aka `ibatis-sqlmap`)\r\n* `br.com.anteros.dbcp.AnterosDBCPConfig` (aka `anteros-core`)\r\n* `org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig` (aka shaded `hikari-config`)\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/9f4e97019fb0dd836533d0b6198c88787e235ae2)\n- [Github Issue #1](https://github.com/FasterXML/jackson-databind/issues/2634)\n- [GitHub Issue #2](https://github.com/FasterXML/jackson-databind/issues/2631)\n",
        "disclosureTime": "2020-03-02T05:18:36Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.9.10.4"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.6.7.3)",
              "[2.8.0,2.8.11.5)",
              "[2.9.0,2.9.10.3)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.6.7.3)",
              "[2.8.0,2.8.11.5)",
              "[2.9.0,2.9.10.3)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559094",
        "identifiers": {
          "CVE": [
            "CVE-2020-9546",
            "CVE-2020-9547",
            "CVE-2020-9548"
          ],
          "CWE": [
            "CWE-502"
          ],
          "GHSA": [
            "GHSA-5p34-5m6p-p58g"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-04-29T15:02:42.688387Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-03-02T05:18:36Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/9f4e97019fb0dd836533d0b6198c88787e235ae2"
          },
          {
            "title": "Github Issue #1",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2634"
          },
          {
            "title": "GitHub Issue #2",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2631"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.9.10.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-03T08:13:33.357434Z",
        "credit": [
          "Pedro Sampaio"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507)). \r\nIt doesn't block `common-configuration` JNDI classes `org.apache.commons.configuration.JNDIConfiguration` and `org.apache.commons.configuration2.JNDIConfiguration`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.8.11.5, 2.9.10.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/41b7f9b90149e9d44a65a8261a8deedc7186f6af)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2462)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2469)\n- [RedHat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-14892)\n",
        "disclosureTime": "2020-03-02T17:09:34Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.6.7.3",
          "2.8.11.5",
          "2.9.10.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.6.7.3)",
              "[2.8.0,2.8.11.5)",
              "[2.9.0,2.9.10.3)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.6.7.3)",
              "[2.8.0,2.8.11.5)",
              "[2.9.0,2.9.10.3)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559106",
        "identifiers": {
          "CVE": [
            "CVE-2019-14892",
            "CVE-2019-14893"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-04-29T15:01:24.538507Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-03-02T17:09:34Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/41b7f9b90149e9d44a65a8261a8deedc7186f6af"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2462"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2469"
          },
          {
            "title": "RedHat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-14892"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.3)",
            "[2.8.0,2.8.11.5)",
            "[2.9.0,2.9.10.3)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-19T14:36:02.644920Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `com.caucho.config.types.ResourceRef` (aka `caucho-quercus`).\r\n\r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Commit (Master)](https://github.com/FasterXML/jackson-databind/commit/1645efbd392989cf015f459a91c999e59c921b15)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2660)\n- [On Jackson CVEs: Don’t Panic — Here is what you need to know](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
        "disclosureTime": "2020-03-18T22:56:21Z",
        "exploit": "Unproven",
        "fixedIn": [
          "2.9.10.4"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0,2.9.10.4)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0,2.9.10.4)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-560762",
        "identifiers": {
          "CVE": [
            "CVE-2020-10673"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-06-12T14:36:56.467131Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-03-18T22:56:21Z",
        "references": [
          {
            "title": "GitHub Commit (Master)",
            "url": "https://github.com/FasterXML/jackson-databind/commit/1645efbd392989cf015f459a91c999e59c921b15"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2660"
          },
          {
            "title": "On Jackson CVEs: Don’t Panic — Here is what you need to know",
            "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0,2.9.10.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-19T15:03:20.847507Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory` (aka `aries.transaction.jms`). \r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Commit (Master)](https://github.com/FasterXML/jackson-databind/commit/592872f4235c7f2a3280725278da55544032f72d)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2659)\n- [On Jackson CVEs: Don’t Panic](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
        "disclosureTime": "2020-03-18T22:56:24Z",
        "exploit": "Unproven",
        "fixedIn": [
          "2.9.10.4"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0,2.9.10.4)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0,2.9.10.4)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-560766",
        "identifiers": {
          "CVE": [
            "CVE-2020-10672"
          ],
          "CWE": [
            "CWE-502"
          ],
          "GHSA": [
            "GHSA-95cm-88f5-f2c7"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-06-12T14:37:00.748177Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-03-18T22:56:24Z",
        "references": [
          {
            "title": "GitHub Commit (Master)",
            "url": "https://github.com/FasterXML/jackson-databind/commit/592872f4235c7f2a3280725278da55544032f72d"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2659"
          },
          {
            "title": "On Jackson CVEs: Don’t Panic",
            "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0,2.9.10.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-26T16:25:31.113677Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to gadget `javax.swing.JEditorPane`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2642)\n- [Medium Article](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
        "disclosureTime": "2020-03-26T14:55:31Z",
        "exploit": "Unproven",
        "fixedIn": [
          "2.9.10.4"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0,2.9.10.4)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0,2.9.10.4)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561362",
        "identifiers": {
          "CVE": [
            "CVE-2020-10969"
          ],
          "CWE": [
            "CWE-502"
          ],
          "GHSA": [
            "GHSA-758m-v56v-grj4"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-04-29T14:56:05.785443Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-03-26T14:55:31Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2642"
          },
          {
            "title": "Medium Article",
            "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0,2.9.10.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-26T17:09:01.709397Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to gadget `org.aoju.bus.proxy.provider.remoting.RmiProvider` (aka bus-proxy).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2662)\n",
        "disclosureTime": "2020-03-26T14:55:20Z",
        "exploit": "Unproven",
        "fixedIn": [
          "2.9.10.4"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0,2.9.10.4)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0,2.9.10.4)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561373",
        "identifiers": {
          "CVE": [
            "CVE-2020-10968"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-04-29T14:47:21.445199Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-03-26T14:55:20Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2662"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0,2.9.10.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-31T08:36:41.369827Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to gadget `org.apache.openjpa.ee.WASRegistryManagedRuntime` (aka openjpa).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/e2ba12d5d60715d95105e3e790fc234cfb59893d)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2670)\n",
        "disclosureTime": "2020-03-31T06:16:36Z",
        "exploit": "Unproven",
        "fixedIn": [
          "2.9.10.4"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0,2.9.10.4)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0,2.9.10.4)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561585",
        "identifiers": {
          "CVE": [
            "CVE-2020-11113"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-04-29T14:48:40.106762Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-03-31T06:16:36Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/e2ba12d5d60715d95105e3e790fc234cfb59893d"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2670"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.9.10.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-31T09:28:18.821103Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to gadgets `org.apache.activemq.*` (aka activemq-jms, activemq-core, activemq-pool, and activemq-pool-jms).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/c14c9f99ed030dbd1440129585f03440c8758a99)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2664)\n",
        "disclosureTime": "2020-03-31T06:16:37Z",
        "exploit": "Unproven",
        "fixedIn": [
          "2.9.10.4"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.10.4)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.10.4)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561586",
        "identifiers": {
          "CVE": [
            "CVE-2020-11111"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-04-29T15:04:00.667463Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-03-31T06:16:37Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/c14c9f99ed030dbd1440129585f03440c8758a99"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2664"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.9.10.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-31T09:29:29.728517Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to gadget  `org.apache.commons.proxy.provider.remoting.RmiProvider` (aka apache/commons-proxy).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GItHub Commit](https://github.com/FasterXML/jackson-databind/commit/05d7e0e13f43e12db6a51726df12c8b4d8040676)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2666)\n",
        "disclosureTime": "2020-03-31T06:16:37Z",
        "exploit": "Unproven",
        "fixedIn": [
          "2.9.10.4"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.10.4)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.10.4)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561587",
        "identifiers": {
          "CVE": [
            "CVE-2020-11112"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-04-29T15:04:48.383032Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-03-31T06:16:37Z",
        "references": [
          {
            "title": "GItHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/05d7e0e13f43e12db6a51726df12c8b4d8040676"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2666"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.9.10.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-04-08T10:55:38.169333Z",
        "credit": [
          "Tatu Saloranta"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `org.apache.commons.jelly.impl.Embedded` (aka `commons-jelly`).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2682)\n- [Medium Post](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
        "disclosureTime": "2020-04-08T00:42:23Z",
        "exploit": "Unproven",
        "fixedIn": [
          "2.9.10.4"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.10.4)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.10.4)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-564887",
        "identifiers": {
          "CVE": [
            "CVE-2020-11620"
          ],
          "CWE": [
            "CWE-502"
          ],
          "GHSA": [
            "GHSA-h4rc-386g-6m85"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-06-12T14:37:02.849327Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-04-08T00:42:23Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2682"
          },
          {
            "title": "Medium Post",
            "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.9.10.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-04-08T10:59:04.995807Z",
        "credit": [
          "Tatu Saloranta"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `org.springframework.aop.config.MethodLocatingFactoryBean` (aka `spring-aop`).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n## References\n- [GitHub Issues](https://github.com/FasterXML/jackson-databind/issues/2680)\n- [Medium Post](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
        "disclosureTime": "2020-04-08T00:42:25Z",
        "exploit": "Unproven",
        "fixedIn": [
          "2.9.10.4"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0,2.9.10.4)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0,2.9.10.4)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-564888",
        "identifiers": {
          "CVE": [
            "CVE-2020-11619"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-06-12T14:37:00.233115Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-04-08T00:42:25Z",
        "references": [
          {
            "title": "GitHub Issues",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2680"
          },
          {
            "title": "Medium Post",
            "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.9.10.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-05-29T15:36:30.302636Z",
        "credit": [
          "XuYuanzhen"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It is possible to conduct a Deserialization attack using the `com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool`  (`xalan2`) class gadget if polymorphic type handling is enabled and an application using this package allows user input which gets deserialized. \r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.5 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/840eae2ca81c597a0010b2126f32dce17d384b70)\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2704)\n",
        "disclosureTime": "2020-05-01T15:36:06Z",
        "exploit": "Unproven",
        "fixedIn": [
          "2.9.10.5"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.10.0)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.10.0)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-570625",
        "identifiers": {
          "CVE": [
            "CVE-2020-14062"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-06-23T15:44:48.450704Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-05-29T15:36:05Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/840eae2ca81c597a0010b2126f32dce17d384b70"
          },
          {
            "title": "Github Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2704"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.9.10.5)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-06-14T14:48:40.820120Z",
        "credit": [
          "Al1ex@knownsec"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.jsecurity.realm.jndi.JndiRealmFactory`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.5 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/f6d9c664f6d481703138319f6a0f1fdbddb3a259)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2765)\n",
        "disclosureTime": "2020-06-14T14:45:09Z",
        "exploit": "Unproven",
        "fixedIn": [
          "2.9.10.5"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.10.5)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.10.5)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572300",
        "identifiers": {
          "CVE": [
            "CVE-2020-14195"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-07-03T09:44:58.756442Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-06-14T15:32:14Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/f6d9c664f6d481703138319f6a0f1fdbddb3a259"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2765"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.9.10.5)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-06-15T10:29:46.691157Z",
        "credit": [
          "Topsec"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It is possible to conduct a Deserialization attack using the `oadd.org.apache.xalan.lib.sql.JNDIConnectionPool`  (`apache/drill`) class gadget if polymorphic type handling is enabled and an application using this package allows user input which gets deserialized. \r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.5 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/d1c67a0396e84c08d0558fbb843b5bd1f26e1921)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2688)\n- [Medium Article](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
        "disclosureTime": "2020-06-15T10:23:33Z",
        "exploit": "Unproven",
        "fixedIn": [
          "2.9.10.5"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.10.0)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.10.0)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572314",
        "identifiers": {
          "CVE": [
            "CVE-2020-14060"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-06-23T15:44:28.959696Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-06-15T15:46:13Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/d1c67a0396e84c08d0558fbb843b5bd1f26e1921"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2688"
          },
          {
            "title": "Medium Article",
            "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.9.10.5)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-06-15T11:03:46.232208Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It is possible to conduct a Deserialization attack using any of the following class gadget available within `weblogic/oracle-aqjms` if polymorphic type handling is enabled and an application using this package allows user input which gets deserialized. \r\n\r\n* oracle.jms.AQjmsQueueConnectionFactory\r\n* oracle.jms.AQjmsXATopicConnectionFactory\r\n* oracle.jms.AQjmsTopicConnectionFactory\r\n* oracle.jms.AQjmsXAQueueConnectionFactory\r\n* oracle.jms.AQjmsXAConnectionFactory\r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.5 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2698)\n- [Medium Article](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
        "disclosureTime": "2020-06-15T10:59:39Z",
        "exploit": "Unproven",
        "fixedIn": [
          "2.9.10.5"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.10.0)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "com.fasterxml.jackson.databind.ObjectMapper",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.10.0)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572316",
        "identifiers": {
          "CVE": [
            "CVE-2020-14061"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "modificationTime": "2020-06-23T15:43:52.618349Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-06-15T15:45:37Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2698"
          },
          {
            "title": "Medium Article",
            "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.9.10.5)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "io.jsonwebtoken:jjwt-jackson@0.10.5",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "version": "2.9.8"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-12-20T15:26:08.265027Z",
        "credit": [
          "William Marlow (IBM)"
        ],
        "cvssScore": 3.1,
        "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Session Fixation. When using FORM authentication there was a narrow window where an attacker could perform a session fixation attack. The window was considered too narrow for an exploit to be practical but, erring on the side of caution, this issue has been treated as a security vulnerability.\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 9.0.30, 8.5.50, 7.0.99 or higher.\n## References\n- [GitHub Commit](https://github.com/apache/tomcat/commit/e19a202)\n- [Tomcat Security Advisory 7](https://tomcat.apache.org/security-7.html)\n- [Tomcat Security Advisory 8](https://tomcat.apache.org/security-8.html)\n- [Tomcat Security Advisory 9](https://tomcat.apache.org/security-9.html)\n",
        "disclosureTime": "2019-12-18T15:13:41Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "9.0.30",
          "8.5.50",
          "7.0.99"
        ],
        "functions": [
          {
            "functionId": {
              "className": "FormAuthenticator",
              "filePath": "org/apache/catalina/authenticator/FormAuthenticator.java",
              "functionName": "authenticate"
            },
            "version": [
              "[9.0.0.M1, 9.0.0.M10)",
              "[8.5.0, 8.5.5)",
              "[,7.0.99)"
            ]
          },
          {
            "functionId": {
              "className": "FormAuthenticator",
              "filePath": "org/apache/catalina/authenticator/FormAuthenticator.java",
              "functionName": "doAuthenticate"
            },
            "version": [
              "[9.0.0.M10, 9.0.30)",
              "[8.5.5,8.5.50)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "org.apache.catalina.authenticator.FormAuthenticator",
              "functionName": "authenticate"
            },
            "version": [
              "[9.0.0.M1, 9.0.0.M10)",
              "[8.5.0, 8.5.5)",
              "[,7.0.99)"
            ]
          },
          {
            "functionId": {
              "className": "org.apache.catalina.authenticator.FormAuthenticator",
              "functionName": "doAuthenticate"
            },
            "version": [
              "[9.0.0.M10, 9.0.30)",
              "[8.5.5,8.5.50)"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-538488",
        "identifiers": {
          "CVE": [
            "CVE-2019-17563"
          ],
          "CWE": [
            "CWE-384"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "tomcat-embed-core",
          "groupId": "org.apache.tomcat.embed"
        },
        "modificationTime": "2020-06-12T14:36:55.569641Z",
        "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
        "packageManager": "maven",
        "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-12-20T15:13:36Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/tomcat/commit/e19a202"
          },
          {
            "title": "Tomcat Security Advisory 7",
            "url": "https://tomcat.apache.org/security-7.html"
          },
          {
            "title": "Tomcat Security Advisory 8",
            "url": "https://tomcat.apache.org/security-8.html"
          },
          {
            "title": "Tomcat Security Advisory 9",
            "url": "https://tomcat.apache.org/security-9.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[9.0.0.M1, 9.0.30)",
            "[8.5.0,8.5.50)",
            "[,7.0.99)"
          ]
        },
        "severity": "low",
        "title": "Session Fixation",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE",
          "org.springframework.boot:spring-boot-starter-tomcat@2.1.2.RELEASE",
          "org.apache.tomcat.embed:tomcat-embed-core@9.0.14"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "org.apache.tomcat.embed:tomcat-embed-core",
        "version": "9.0.14"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:F",
        "alternativeIds": [],
        "creationTime": "2020-05-21T15:46:46.394901Z",
        "credit": [
          "Apache Tomcat Security Team"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE). If an attacker is able to control the contents and name of a file on the server; and the server is configured to use the PersistenceManager with a FileStore; and the PersistenceManager is configured with sessionAttributeValueClassNameFilter=\"null\" (the default unless a SecurityManager is used) or a sufficiently lax filter to allow the attacker provided object to be deserialized; and the attacker knows the relative file path from the storage location used by FileStore to the file the attacker has control over; then, using a specifically crafted request, the attacker will be able to trigger remote code execution via deserialization of the file under their control.\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 10.0.0-M5, 9.0.35, 8.5.55, 7.0.104 or higher.\n## References\n- [Exploit Code](https://github.com/masahiro331/CVE-2020-9484)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/3aa8f28db7efb311cdd1b6fe15a9cd3b167a2222)\n",
        "disclosureTime": "2020-05-21T07:10:43Z",
        "exploit": "Functional",
        "fixedIn": [
          "10.0.0-M5",
          "9.0.35",
          "8.5.55",
          "7.0.104"
        ],
        "functions": [
          {
            "functionId": {
              "className": "FileStore",
              "filePath": "org/apache/catalina/session/FileStore.java",
              "functionName": "file"
            },
            "version": [
              "[10.0.0-M1, 10.0.0-M5)",
              "[9.0.0M1, 9.0.35)",
              "[8.5.0, 8.5.55)",
              "[7.0.0, 7.0.104)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "org.apache.catalina.session.FileStore",
              "functionName": "file"
            },
            "version": [
              "[10.0.0-M1, 10.0.0-M5)",
              "[9.0.0M1, 9.0.35)",
              "[8.5.0, 8.5.55)",
              "[7.0.0, 7.0.104)"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-570072",
        "identifiers": {
          "CVE": [
            "CVE-2020-9484"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "tomcat-embed-core",
          "groupId": "org.apache.tomcat.embed"
        },
        "modificationTime": "2020-06-23T07:42:56.372341Z",
        "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
        "packageManager": "maven",
        "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-05-20T07:22:27Z",
        "references": [
          {
            "title": "Exploit Code",
            "url": "https://github.com/masahiro331/CVE-2020-9484"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/tomcat/commit/3aa8f28db7efb311cdd1b6fe15a9cd3b167a2222"
          }
        ],
        "semver": {
          "vulnerable": [
            "[10.0.0-M1, 10.0.0-M5)",
            "[9.0.0M1, 9.0.35)",
            "[8.5.0, 8.5.55)",
            "[7.0.0, 7.0.104)"
          ]
        },
        "severity": "high",
        "title": "Remote Code Execution (RCE)",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE",
          "org.springframework.boot:spring-boot-starter-tomcat@2.1.2.RELEASE",
          "org.apache.tomcat.embed:tomcat-embed-core@9.0.14"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "org.apache.tomcat.embed:tomcat-embed-core",
        "version": "9.0.14"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2020-07-15T10:19:05.157835Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). An `h2c` direct connection did not release the `HTTP/1.1` processor after the upgrade to `HTTP/2`. If a sufficient number of such requests are made, an `OutOfMemoryException` could occur leading to a denial of service.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 10.0.0-M7, 9.0.37, 8.5.57 or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/r61f411cf82488d6ec213063fc15feeeb88e31b0ca9c29652ee4f962e%40%3Cannounce.tomcat.apache.org%3E)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/172977f04a5215128f1e278a688983dcd230f399)\n",
        "disclosureTime": "2020-07-15T09:39:15Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "10.0.0-M7",
          "9.0.37",
          "8.5.57"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-584427",
        "identifiers": {
          "CVE": [
            "CVE-2020-13934"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "tomcat-embed-core",
          "groupId": "org.apache.tomcat.embed"
        },
        "modificationTime": "2020-07-15T16:40:14.629224Z",
        "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
        "packageManager": "maven",
        "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-07-15T16:40:14.601976Z",
        "references": [
          {
            "title": "Apache Security Advisory",
            "url": "https://lists.apache.org/thread.html/r61f411cf82488d6ec213063fc15feeeb88e31b0ca9c29652ee4f962e%40%3Cannounce.tomcat.apache.org%3E"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/tomcat/commit/172977f04a5215128f1e278a688983dcd230f399"
          }
        ],
        "semver": {
          "vulnerable": [
            "[10.0.0-M1,10.0.0-M7)",
            "[9.0.0.M5, 9.0.37)",
            "[8.5.1,8.5.57)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE",
          "org.springframework.boot:spring-boot-starter-tomcat@2.1.2.RELEASE",
          "org.apache.tomcat.embed:tomcat-embed-core@9.0.14"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "org.apache.tomcat.embed:tomcat-embed-core",
        "version": "9.0.14"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2020-05-05T12:05:58.552935Z",
        "credit": [
          "Alvaro Muñoz"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[org.hibernate.validator:hibernate-validator](https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator) is a Hibernate Validator Engine Relocation Artifact.\n\nAffected versions of this package are vulnerable to Improper Input Validation. A bug in the message interpolation processor enables invalid EL expressions to be evaluated as if they were valid. This flaw allows attackers to bypass input sanitation (escaping, stripping) controls that developers may have put in place when handling user-controlled data in error messages.\n## Remediation\nUpgrade `org.hibernate.validator:hibernate-validator` to version 6.0.19.Final, 6.1.3.Final or higher.\n## References\n- [GitHub PR](https://github.com/hibernate/hibernate-validator/pull/1071)\n- [Jira Issue](https://hibernate.atlassian.net/browse/HV-1758)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1805501)\n",
        "disclosureTime": "2020-05-05T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "6.0.19.Final",
          "6.1.3.Final"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ValidatorImpl",
              "filePath": "org/hibernate/validator/internal/engine/ValidatorImpl.java",
              "functionName": "validate"
            },
            "version": [
              "[,6.0.19.Final)",
              "[6.1.0,6.1.3.Final)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "org.hibernate.validator.internal.engine.ValidatorImpl",
              "functionName": "validate"
            },
            "version": [
              "[,6.0.19.Final)",
              "[6.1.0,6.1.3.Final)"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGHIBERNATEVALIDATOR-568163",
        "identifiers": {
          "CVE": [
            "CVE-2020-10693"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "hibernate-validator",
          "groupId": "org.hibernate.validator"
        },
        "modificationTime": "2020-07-06T10:07:04.551592Z",
        "moduleName": "org.hibernate.validator:hibernate-validator",
        "packageManager": "maven",
        "packageName": "org.hibernate.validator:hibernate-validator",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-05-05T16:32:46Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/hibernate/hibernate-validator/pull/1071"
          },
          {
            "title": "Jira Issue",
            "url": "https://hibernate.atlassian.net/browse/HV-1758"
          },
          {
            "title": "RedHat Bugzilla Bug",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1805501"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,6.0.19.Final)",
            "[6.1.0,6.1.3.Final)"
          ]
        },
        "severity": "medium",
        "title": "Improper Input Validation",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE",
          "org.hibernate.validator:hibernate-validator@6.0.14.Final"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "org.hibernate.validator:hibernate-validator",
        "version": "6.0.14.Final"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N/E:U/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2020-06-05T11:18:21.077412Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.2,
        "description": "## Overview\n[org.postgresql:postgresql](https://mvnrepository.com/artifact/org.postgresql/postgresql) is a Java JDBC 4.2 (JRE 8+) driver for PostgreSQL database.\n\nAffected versions of this package are vulnerable to XML External Entity (XXE) Injection. The `PgSQLXML` class used for parsing was found to allow external entities and multiple doc types which could allow XXE attacks.\n\n## Details\nXXE Injection is a type of attack against an application that parses XML input.\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. By default, many XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. When an XML document is being parsed, the parser can make a request and include the content at the specified URI inside of the XML document.\n\nAttacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.\n\nFor example, below is a sample XML document, containing an XML element- username.\n\n```xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n   <username>John</username>\n</xml>\n```\n\nAn external XML entity - `xxe`, is defined using a system identifier and present within a DOCTYPE header. These entities can access local or remote content. For example the below code contains an external XML entity that would fetch the content of  `/etc/passwd` and display it to the user rendered by `username`.\n\n```xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE foo [\n   <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\n   <username>&xxe;</username>\n</xml>\n```\n\nOther XXE Injection attacks can access local resources that may not stop returning data, possibly impacting application availability and leading to Denial of Service.\n## Remediation\nUpgrade `org.postgresql:postgresql` to version 42.2.13 or higher.\n## References\n- [GitHub Commit](https://github.com/pgjdbc/pgjdbc/commit/14b62aca4764d496813f55a43d050b017e01eb65)\n- [Release Notes](https://jdbc.postgresql.org/documentation/changelog.html#version_42.2.13)\n",
        "disclosureTime": "2020-06-05T11:14:37Z",
        "exploit": "Unproven",
        "fixedIn": [
          "42.2.13"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGPOSTGRESQL-571481",
        "identifiers": {
          "CVE": [
            "CVE-2020-13692"
          ],
          "CWE": [
            "CWE-611"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "postgresql",
          "groupId": "org.postgresql"
        },
        "modificationTime": "2020-06-09T17:44:48.173405Z",
        "moduleName": "org.postgresql:postgresql",
        "packageManager": "maven",
        "packageName": "org.postgresql:postgresql",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-06-05T13:44:59Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/pgjdbc/pgjdbc/commit/14b62aca4764d496813f55a43d050b017e01eb65"
          },
          {
            "title": "Release Notes",
            "url": "https://jdbc.postgresql.org/documentation/changelog.html%23version_42.2.13"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,42.2.13)"
          ]
        },
        "severity": "high",
        "title": "XML External Entity (XXE) Injection",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "org.postgresql:postgresql@42.2.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "org.postgresql:postgresql",
        "version": "42.2.5"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-03-05T15:02:31.577470Z",
        "credit": [
          "Roman Shalymov"
        ],
        "cvssScore": 8,
        "description": "## Overview\n[org.springframework:spring-web](https://github.com/spring-projects/spring-framework) is a package that provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.\n\nAffected versions of this package are vulnerable to Reflected File Download (RFD). A reflected file download attack is possible when the filename attribute of the `Content-Disposition` header is derived from user-supplied input.\n## Remediation\nUpgrade `org.springframework:spring-web` to version 5.2.3, 5.1.13, 5.0.16 or higher.\n## References\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76)\n- [GitHub Issue](https://github.com/spring-projects/spring-framework/issues/24220)\n- [Pivotal Vulnerability Report](https://pivotal.io/security/cve-2020-5398)\n",
        "disclosureTime": "2020-01-16T13:47:43Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "5.2.3",
          "5.1.13",
          "5.0.16"
        ],
        "functions": [
          {
            "functionId": {
              "className": "ContentDisposition$Builder",
              "filePath": "org/springframework/http/ContentDisposition$Builder.java",
              "functionName": "filename"
            },
            "version": [
              "[5.2.0, 5.2.3)",
              "[5.1.0, 5.1.13)",
              "[5.0.0, 5.0.16)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "org.springframework.http.ContentDisposition$Builder",
              "functionName": "filename"
            },
            "version": [
              "[5.2.0, 5.2.3)",
              "[5.1.0, 5.1.13)",
              "[5.0.0, 5.0.16)"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-559346",
        "identifiers": {
          "CVE": [
            "CVE-2020-5398"
          ],
          "CWE": [
            "CWE-494"
          ],
          "GHSA": [
            "GHSA-8wx2-9q48-vm9r"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "spring-web",
          "groupId": "org.springframework"
        },
        "modificationTime": "2020-06-12T14:36:55.561710Z",
        "moduleName": "org.springframework:spring-web",
        "packageManager": "maven",
        "packageName": "org.springframework:spring-web",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-22T13:47:42Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/spring-projects/spring-framework/issues/24220"
          },
          {
            "title": "Pivotal Vulnerability Report",
            "url": "https://pivotal.io/security/cve-2020-5398"
          }
        ],
        "semver": {
          "vulnerable": [
            "[5.2.0, 5.2.3)",
            "[5.1.0, 5.1.13)",
            "[5.0.0, 5.0.16)"
          ]
        },
        "severity": "high",
        "title": "Reflected File Download (RFD)",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE",
          "org.springframework:spring-web@5.1.4.RELEASE"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "org.springframework:spring-web",
        "version": "5.1.4.RELEASE"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:U/RL:T/RC:U",
        "alternativeIds": [],
        "creationTime": "2019-12-12T13:08:53.753033Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\n[org.yaml:snakeyaml](https://code.google.com/p/snakeyaml/source/browse/) is a YAML 1.1 parser and emitter for Java.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The Alias feature in SnakeYAML 1.18 allows entity expansion during a load operation, a related issue to CVE-2003-1564.\r\n\r\n*Note* While the Maintainer acknowledges the existence of the issue, they believe it should be solved by sanitizing the `inputStream` to the parser\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\nUpgrade `org.yaml:snakeyaml` to version 1.26 or higher.\n## References\n- [Bitbucket Commit](https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c)\n- [Bitbucket Issue](https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion)\n- [Maintainer Report](https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack)\n- [Proof Of Concept](https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222)\n",
        "disclosureTime": "2019-12-12T03:28:21Z",
        "exploit": "Unproven",
        "fixedIn": [
          "1.26"
        ],
        "functions": [
          {
            "functionId": {
              "className": "Composer",
              "filePath": "org/yaml/snakeyaml/composer/Composer.java",
              "functionName": "composeNode"
            },
            "version": [
              "[,1.26)"
            ]
          },
          {
            "functionId": {
              "className": "BaseConstructor",
              "filePath": "org/yaml/snakeyaml/constructor/BaseConstructor.java",
              "functionName": "constructMapping2ndStep"
            },
            "version": [
              "[,1.26)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "org.yaml.snakeyaml.composer.Composer",
              "functionName": "composeNode"
            },
            "version": [
              "[,1.26)"
            ]
          },
          {
            "functionId": {
              "className": "org.yaml.snakeyaml.constructor.BaseConstructor",
              "functionName": "constructMapping2ndStep"
            },
            "version": [
              "[,1.26)"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGYAML-537645",
        "identifiers": {
          "CVE": [
            "CVE-2017-18640"
          ],
          "CWE": [
            "CWE-189"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "snakeyaml",
          "groupId": "org.yaml"
        },
        "modificationTime": "2020-06-12T14:37:03.328628Z",
        "moduleName": "org.yaml:snakeyaml",
        "packageManager": "maven",
        "packageName": "org.yaml:snakeyaml",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-12-19T03:28:21Z",
        "references": [
          {
            "title": "Bitbucket Commit",
            "url": "https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c"
          },
          {
            "title": "Bitbucket Issue",
            "url": "https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion"
          },
          {
            "title": "Maintainer Report",
            "url": "https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack"
          },
          {
            "title": "Proof Of Concept",
            "url": "https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.26)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "org.springframework.boot:spring-boot-starter@2.1.2.RELEASE",
          "org.yaml:snakeyaml@1.23"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "org.yaml:snakeyaml",
        "version": "1.23"
      },
      {
        "license": "(EPL-1.0 OR LGPL-2.0)",
        "semver": {
          "vulnerable": [
            "[0.9.18,)"
          ]
        },
        "id": "snyk:lic:maven:ch.qos.logback:logback-classic:(EPL-1.0_OR_LGPL-2.0)",
        "type": "license",
        "packageManager": "maven",
        "language": "java",
        "packageName": "ch.qos.logback:logback-classic",
        "title": "Dual license: EPL-1.0, LGPL-2.0",
        "description": "Dual license: EPL-1.0, LGPL-2.0",
        "publicationTime": "2020-07-25T03:34:27.243Z",
        "creationTime": "2020-07-25T03:34:27.243Z",
        "licenseTemplateUrl": [
          "https://raw.githubusercontent.com/spdx/license-list/master/EPL-1.0.txt",
          "https://raw.githubusercontent.com/spdx/license-list/master/LGPL-2.0.txt"
        ],
        "severity": "medium",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "org.springframework.boot:spring-boot-starter@2.1.2.RELEASE",
          "org.springframework.boot:spring-boot-starter-logging@2.1.2.RELEASE",
          "ch.qos.logback:logback-classic@1.2.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "ch.qos.logback:logback-classic",
        "version": "1.2.3"
      },
      {
        "license": "(EPL-1.0 OR LGPL-2.0)",
        "semver": {
          "vulnerable": [
            "[0.9.18,)"
          ]
        },
        "id": "snyk:lic:maven:ch.qos.logback:logback-core:(EPL-1.0_OR_LGPL-2.0)",
        "type": "license",
        "packageManager": "maven",
        "language": "java",
        "packageName": "ch.qos.logback:logback-core",
        "title": "Dual license: EPL-1.0, LGPL-2.0",
        "description": "Dual license: EPL-1.0, LGPL-2.0",
        "publicationTime": "2020-07-25T03:34:27.685Z",
        "creationTime": "2020-07-25T03:34:27.685Z",
        "licenseTemplateUrl": [
          "https://raw.githubusercontent.com/spdx/license-list/master/EPL-1.0.txt",
          "https://raw.githubusercontent.com/spdx/license-list/master/LGPL-2.0.txt"
        ],
        "severity": "medium",
        "from": [
          "com.scalesec:vulnado@0.0.1-SNAPSHOT",
          "org.springframework.boot:spring-boot-starter@2.1.2.RELEASE",
          "org.springframework.boot:spring-boot-starter-logging@2.1.2.RELEASE",
          "ch.qos.logback:logback-classic@1.2.3",
          "ch.qos.logback:logback-core@1.2.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "ch.qos.logback:logback-core",
        "version": "1.2.3"
      }
    ],
    "upgrade": {
      "io.jsonwebtoken:jjwt-jackson@0.10.5": {
        "upgradeTo": "io.jsonwebtoken:jjwt-jackson@0.10.7",
        "upgrades": [
          "com.fasterxml.jackson.core:jackson-databind@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "vulns": [
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-174736",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-450207",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917"
        ]
      },
      "org.springframework.boot:spring-boot-starter-web@2.1.2.RELEASE": {
        "upgradeTo": "org.springframework.boot:spring-boot-starter-web@2.1.11.RELEASE",
        "upgrades": [
          "org.apache.tomcat.embed:tomcat-embed-core@9.0.14",
          "org.hibernate.validator:hibernate-validator@6.0.14.Final",
          "org.apache.tomcat.embed:tomcat-embed-core@9.0.14",
          "org.apache.tomcat.embed:tomcat-embed-core@9.0.14",
          "org.apache.tomcat.embed:tomcat-embed-core@9.0.14",
          "org.apache.tomcat.embed:tomcat-embed-core@9.0.14"
        ],
        "vulns": [
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-538490",
          "SNYK-JAVA-ORGHIBERNATEVALIDATOR-541187",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-451342",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-451343",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-451458",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-451459"
        ]
      }
    },
    "patch": {},
    "ignore": {},
    "pin": {}
  },
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 43,
  "projectName": "com.scalesec:vulnado",
  "displayTargetFile": "pom.xml",
  "path": "/Users/scott/Projects/snyk-sample-projects/vulnado"
}
